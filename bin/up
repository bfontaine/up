#! /bin/bash
#
# up
#
# Author: Baptiste Fontaine
# License: MIT
# Version: 0.1.2
#
# URI: github.com/bfontaine/up
#

__up() {

    local VERSION='0.1.2'
    local COMMANDS="$HOME/.up-commands"
    local CMDS_URL='https://raw.github.com/bfontaine/up/master/initial-commands'

    up_echo() {
        echo "=up=> $*"
    }

    print_commands() {
        cat $COMMANDS || 0
    }

    add_command() {
        cmd=$1
        shift
        echo "$cmd:$*" >> $COMMANDS
    }

    rm_command() {
        # we can't rely on 'sponge', it's not installed by default
        grep -v "^$1:" $COMMANDS >| .uprm
        mv .uprm $COMMANDS
    }

    exec_command() {
        local cmd
        cmd=`grep "^$1:" $COMMANDS | cut -d: -f2`
        if [ -z "$cmd" ]; then
            up_echo "cannot find command '$1', skipping."
        else
            up_echo "$1"
            eval $cmd
        fi
    }

    exec_all() {
        up_echo "executing all commands..."
        while read l; do
            exec_command `echo "$l" | cut -d: -f1`
        done < $COMMANDS
    }

    print_usage() {
        echo "Usage:
    up <alias> [<alias> ...] # execute a set of commands
    up --list                # list all commands
    up --all                 # execute all commands sets
    up --add <alias> <cmd>   # add a command
    up --rm <alias> <cmd>    # remove a command
    up --version             # display the version number and exit
    up --help                # display this text and exit"
    }

    print_version() {
        echo "up v$VERSION - github.com/bfontaine/up"
    }

    init_commands() {
        curl -s "$CMDS_URL" >| $COMMANDS
    }

    ###

    [ ! -f "$COMMANDS" ] && init_commands

    if [ $# -eq 0 ]; then
        print_usage
        return 0
    fi

    case "$1" in
        -v|--version|-version)
            print_version
            return 0;;

        -h|--help|-help)
            print_usage
            return 0;;

        --ls|--list|-ls|-list)
            print_commands
            return 0;;
            
        --add|-add)
            shift
            add_command $*
            return 0;;

        --rm|-rm)
            shift
            rm_command $1
            return 0;;

        --all|-all)
            exec_all
            return 0;;

        -*)
            echo "Unrecognized option: $1"
            print_usage
            return 1;;

        *)
            while [ $# -gt 0 ]; do
                exec_command $1
                shift
            done
            return 0;;
    esac
}

__up $*

